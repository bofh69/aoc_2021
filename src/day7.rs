use aoc_runner_derive::{aoc, aoc_generator};
// use rayon::prelude::*;

pub type Data = i16;
pub type Value = isize;

#[aoc_generator(day7)]
pub fn input_generator(input: &str) -> Vec<Data> {
    input.split(',').map(|s| s.parse().unwrap()).collect()
}

#[aoc(day7, part1)]
pub fn solve_part1(data: &[Data]) -> Value {
    let min = data.iter().min().unwrap();
    let max = data.iter().max().unwrap();
    // dbg!(min, max);
    let mut result = vec![];

    for i in *min..=*max {
        result.push(data.iter().map(|&v| (v - i).abs() as isize).sum())
    }

    *result.iter().min().unwrap()
}

#[aoc(day7, part2)]
pub fn solve_part2(data: &[Data]) -> Value {
    let min = data.iter().min().unwrap();
    let max = data.iter().max().unwrap();
    // dbg!(min, max);
    let mut result = vec![];

    for i in *min..=*max {
        result.push(
            data.iter()
                .map(|&v| {
                    let dist = (v - i).abs() as isize;
                    // The cost is the triangle number sequence:
                    // 1, 3, 6, 10, 15, 21, 28
                    // generated by n(n+1)/2:
                    dist * (dist + 1) / 2
                })
                .sum(),
        )
    }

    *result.iter().min().unwrap()
}
